{"name":"Html5FormShim","body":"* The project site: https://github.com/dsheiko/HTML5-Form-Shim\r\n* The demo site: http://demo.dsheiko.com/html5formshim/\r\n\r\nCurrently the plugins serves following input types:\r\n\r\n* text\r\n* text\r\n* email\r\n* url\r\n* number\r\n* tel\r\n\r\nand following input properties:\r\n\r\n* novalidate\r\n* placeholder\r\n* required\r\n* autofocus\r\n* pattern\r\n* min\r\n* max\r\n\r\n### How to use\r\nTo enable the shim you simply have to include jQuery and this plugin.\r\n\r\n```js\r\n    <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js\" type=\"text/javascript\"></script>\r\n    <script src=\"./js/jquery.html5form.js\" type=\"text/javascript\"></script>\r\n```\r\n\r\nSee details on how top use HTML5 form at http://www.html5rocks.com/en/tutorials/forms/html5forms/\r\n\r\n### Styling\r\n\r\nTake in the account that legacy browsers ignore CSS pseudo-classes :focus, :invalid, :valid, so use instead classes focus, invalid, valid.\r\n\r\nNOTE: The examples below use CSS3 styles. If you want your forms not only behave, but look the same in all browsers, use simple styles\r\n\r\nExample 1: Custom form submission validation\r\n\r\n    <form class=\"example1\" custom-validation=\"true\">\r\n        <label for=\"name\">Name:</label>\r\n        <input type=\"text\" placeholder=\"Name\" required=\"true\" name=\"name\"  />\r\n        <label for=\"email\">Email:</label>\r\n        <input type=\"email\" placeholder=\"Email\" autofocus=\"true\" required=\"true\" name=\"email\" />\r\n        <label for=\"name\">Age:</label>\r\n        <input type=\"number\" required=\"true\" name=\"age\" min=\"18\" max=\"100\" />\r\n        <label for=\"email\">Promo code:</label>\r\n        <input type=\"text\" name=\"promocode\" required=\"true\" pattern=\"[A-Z]{3}[0-9]{4}\"\r\n    title=\"Promo code consist of 3 uppercase letters followed by 4 digits.\" />\r\n        <label for=\"email\">Tel:</label>\r\n         <input type=\"tel\" name=\"tel\" required=\"true\" pattern=\"^\\+(?:[0-9] ?){6,14}[0-9]$\"\r\n    title=\"Please enter valid tel.\" />\r\n        <button type=\"submit\">Submit</button>\r\n    </form>\r\n\r\n\r\nThis form shows custom tooltips as on old browsers as well as on those supporting HTML5.\r\n\r\nTo make the form showing your custom tooltip on submission validation, define custom-validation property on the\r\nform element.\r\n\r\nThe plugin will use $.setCustomValidityCallback to disaply validation messages. You can override this callback with\r\nyour own function:\r\n\r\n```js\r\n    $.setCustomValidityCallback = function(error) {\r\n       var pos = this.position(),\r\n       tooltip = $('<span class=\"custom-validity-tooltip\">' + error\r\n                   + '<div><div><!-- --></div></div></span>').appendTo('body');\r\n       tooltip.css('top', pos.top - tooltip.height() - 22);\r\n       tooltip.css('left', pos.left - 10);\r\n       window.setTimeout(function(){\r\n            tooltip.remove();\r\n       }, 2500);\r\n    }\r\n```\r\n\r\nIf you need your custom text for validation message, please use $(input).setCustomValidity\r\ninstead of input.setCustomValidity:\r\n\r\n    $('form.example1 input[name=email]').setCustomValidity('Email rejected');\r\n\r\n\r\nExample 2: Custom input type validation\r\n\r\n   <form class=\"example2\">\r\n        <label for=\"name\">Zipcode (custom input type):</label>\r\n        <input type=\"zipcode\" placeholder=\"Zipcode\" required=\"true\" name=\"zipcode\"  />\r\n        <button type=\"submit\">Submit</button>\r\n    </form>\r\n\r\n\r\nUsing the plugin you can define your own input validator:\r\n\r\n```js\r\n    // Custom input type validator example\r\n        $.setCustomInputTypeValidator.Zipcode = function() {\r\n            return {\r\n                init: function() {\r\n                    this.validationMessage.typeMismatch = \"Please enter a valid zip code\";\r\n                },\r\n                checkValidity: function() {\r\n                    var pattern = /^[0-9]{6,8}$/g;\r\n                    this.validity.typeMismatch = pattern.test(this.element.val());\r\n                }\r\n            }\r\n        };\r\n```\r\n\r\nExample 3: With custom oninput callback\r\n\r\n    <form class=\"example3\" >\r\n        <label for=\"email\">Email:</label>\r\n        <input type=\"email\" placeholder=\"Email\" required=\"true\" name=\"email\" />\r\n        <label for=\"password\">Password:</label>\r\n        <input type=\"password\" required=\"true\" name=\"password\" />\r\n        <label for=\"confirm\">Password confirmation:</label>\r\n        <input type=\"password\" required=\"true\" name=\"confirm\" />\r\n        <button type=\"submit\">Submit</button>\r\n    </form>\r\n\r\n\r\nHTML5 introduces a new event oninput, which can be handled to perform additional validation tests on a field.\r\nFor example, making registration form you can define a handler which checks by XMLHttpRequest if the given email\r\nalready exists in DB. Here an example for a cross-browser oninput handler:\r\n\r\n```js\r\n    $('form.example3 input[name=confirm]').bind(\"oninput\", function () {\r\n          var input = $(this);\r\n          if (input.val() != $('form.example3 input[name=password]').val()) {\r\n            input.setCustomValidity('The two passwords must match.');\r\n          } else {\r\n            // input is valid -- reset the error message\r\n            input.setCustomValidity('');\r\n          }\r\n        });\r\n```","tagline":"That is a jquery plugin, which emulates HTML5 Form behavior on old browsers. The plugin also allows to customize form submission validation tooltips and field validation callbacks (e.g. via XMLHttpRequest)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}